<?php
// +----------------------------------------------------------------------
// | 微信管理系统
// +----------------------------------------------------------------------
// | Copyright (c) 2010-2017  All rights reserved.
// +----------------------------------------------------------------------
// | Author:
// +----------------------------------------------------------------------

namespace Branding\Controller;
use User\Api\UserApi as UserApi;

/**
 * 后台首页控制器
 * @author ew_xiaoxiao
 */
class IndexController extends ControlController {
    /**
     * 后台首页
     * @author ew_xiaoxiao
     */
    private static  $certFilePath;
    
    private static  $merchantCertPass; 
    
     
    public function index(){
		
	     $this->meta_title = '代付首页';
      
		 $this->display();
    }

    public function payByCode(){
        
        $order['orderId'] = "123456789";
        $order["memberId"] = "123456789";
        $order["contractId"] = "201704070000013094";
        $order["checkCode"] = "111111";
        $order["payType"] = "DQP";
        $order["currency"] =  "CNY";
        $order["orderTime"] = date('Ymd H:i:s');
        $order["clientIP"]  =  "100.202.103.87";
        $order["validUnit"] = "01";
        $order["validNum"]= "3";
        $order["goodsName"] = "手机";
        $order["goodsDesc"] ="红米世代";
        $order["amount"] = "1000";
        $order["offlineNotifyUrl"] = "http://100.66.155.60:8090/payNotice.jsp";
        //2、请求流程
   
            
    }
    public function getCardInfo(){
        
        $reUrl = 'rpmCardInfo';//接口类型
        $cardNo['cardNo'] = "6225880154901171";
        //2、请求流程
        // String buf = reqData + "&merchantSign=" + merchantSign + "&merchantCert=" + merchantCert;
        
        $sign = $this->sign($cardNo,$password);//password私钥证书的密码
        
        $header =array($reurl . http_build_query($cardNo).'&merchantSign='.$sign . '&merchantCert='.$merchantCert);

        $res = PostHttp($reUrl,$cardNo,$header);
        //3、验证返回签名
//        Map<String,String> retMap = new HashMap<>();
//        retMap.put("cardNo",RSASignUtil.getValue(res,"cardNo"));
//        retMap.put("cardType",RSASignUtil.getValue(res,"cardType"));
//        retMap.put("bankName",RSASignUtil.getValue(res,"bankName"));
//        retMap.put("bankAbbr",RSASignUtil.getValue(res,"bankAbbr"));
//        validRetSign(retMap,res);    
        $ret = explode('&', $ret);
        self::verifySign($ret,$password);
    }
    public static functon getSign($request,$encoding = 'gbk'){
        $certFilePath =self::$certFilePath;
        $password = self::$merchantCertPass;
        $reqStr=http_build_query($request);
        $asci = self::getBytes($reqStr);
        $sign = self::ascii2hex($asci);
        
        return $sign;
        
    }
    
     public static function getBytes($string) {  
        $bytes = array();  
        for($i = 0; $i < strlen($string); $i++){  
             $bytes[] = ord($string[$i]);  
        }  
        return $bytes;  
    }  
    function static ascii2hex($ascii) {
          $hex = '';
          for ($i = 0; $i < strlen($ascii); $i++) {
            $byte = strtoupper(dechex(ord($ascii{$i})));
            $byte = str_repeat('0', 2 - strlen($byte)).$byte;
            $hex.=$byte." ";
          }
          return $hex;
    }
    
    public static function getCert(){
        openssl_private_encrypt();    
    }
    
    /**
   * 根据原文生成签名内容
   *
   * @param string $data 原文内容
   *
   * @return string
   * @author confu
   */
  public static function sign($data,$password)
  {
    
    $filePath = 'test.p12';
    if(!file_exists($filePath)) {
      return false;
    }
  
    $pkcs12 = file_get_contents($filePath);
    if (openssl_pkcs12_read($pkcs12, $certs, $password)) { //私钥带有密码
      $privateKey = $certs['pkey']; //根据实际情况键值可能不同
      $publicKey = $certs['cert'];　//根据实际情况键值可能不同
      $binary_signature = "";
      if (openssl_sign($data, $binarySignature, $privateKey, OPENSSL_ALGO_SHA1)) {
        return $binarySignature;
      } else {
        return '';
      }
    } else {
      return '';
    }
  }
  
  /**
   * 验证签名自己生成的是否正确
   *
   * @param string $data 签名的原文
   * @param string $signature 签名
   *
   * @return bool
   * @author confu
   */
  public static verifySign($data, $signature,$password)
  {
    $filePath = 'test.p12';
    if(!file_exists($filePath)) {
      return false;
    }
  
    $pkcs12 = file_get_contents($filePath);
    if (openssl_pkcs12_read($pkcs12, $certs, $password)) {
      $publicKey = $certs['cert'];
      $ok = openssl_verify($data, $signature, $publicKey);
      if ($ok == 1) {
        return true;
      }
    }
    return false;
  }
  
  /**
   * 验证返回的签名是否正确
   *
   * @param string $data　要验证的签名原文
   * @param string $signature 签名内容
   *
   * @return bool
   * @author confu
   */
  public static verifyRespondSign($data, $signature)
  {
    $filePath = 'allinpay-pds.pem';
    if(!file_exists($filePath)) {
      return false;
    }
  
    $fp = fopen($filePath, "r");
    $cert = fread($fp, 8192);
    fclose($fp);
    $pubkeyid = openssl_get_publickey($cert);
  
    if(!is_resource($pubkeyid)) {
      return false;
    }
  
    $ok = openssl_verify($data, $signature, $pubkeyid);
    if ($ok == 1) {
      openssl_free_key($pubkeyid);
      return true;
    }
    return false;
  }
}
